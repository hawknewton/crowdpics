#!/usr/bin/env ruby

require 'rubygems'
require 'mail'
require 'uuid'
require 'exifr'

to = ARGV[0]
from = ARGV[1]

buf = STDIN.read

mail = Mail.read_from_string buf

image_attachments = mail.attachments.keep_if { |x| x.content_type.start_with? 'image/' }

image_attachments.each do |image_attachment|
  type = case image_attachment.content_type.gsub(/^image\/([^\s;]+).*/, '\1').downcase
    when 'jpg', 'jpeg', 'pjpeg' #WTF is a pjpeg?
      'jpg'
    when 'gif'
      'gif'
    when 'bmp', 'bitmap'
      'bmp'
    when 'png'
      'png'
    when 'tif'
      'tif'
    else
      raise "Unknown format: #{image_attachment.content_type}"
    end


  name = "#{UUID.generate.upcase}.#{type}"
  path = (File.join(File.dirname(__FILE__), "../db/pictures/#{name}"))
  image = image_attachment.body.decoded

  begin
    File.open(path, "w+b", 0644) do |f|
      f.write image
    end
  rescue Exception => e
    raise "Couldn't save image: #{e}"
  end

  lat, long = nil

  if ['jpg', 'tif'].include? type
    begin
      exif = EXIFR::JPEG.new(StringIO.new image)

      lat = exif.gps_latitude.to_f
      long = exif.gps_longitude.to_f

      if exif.gps_latitude_ref == 'S'
        lat = 0 - lat
      end

      if exif.gps_longitude_ref == 'W'
        long = 0 - long
      end

      puts "lat:  #{lat}"
      puts "long: #{long}"
    rescue Exception => e
      puts "Couldn't extract lat/long: #{e}"
    end
  end

  puts "Wrote #{name} #{buf.length} bytes"
end

puts "#{image_attachments.length} from #{from} to #{to}"


